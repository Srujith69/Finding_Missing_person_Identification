from image_similarity_api import get_distance
import streamlit as st
import os
from PIL import Image
import pandas as pd
import uuid
import warnings
from send_mail import SendMail
import requests

os.makedirs(os.path.join('data','user_data','found_images'),exist_ok=True)
th = 0.8

def gps_tracker():
    r = requests.get('https://ipinfo.io/?token=6c098641e84c13')
    return r.json()

def load_image(image_file,path_to_save,save=False):
    img = Image.open(image_file)
    if save:
        img.save(path_to_save)
    return img
    
def send_email(num,sender_email,passw,rec_email,admin_email,name,img,r):
    try:
        # print(r)
        new_mail = SendMail([rec_email,admin_email], f'Spotted {name}',
                            f"Hey,\nI am attaching the Image of found person.\nMy contact Number:{num}\nAutogenerated Location Details : {r}", 
                            sender_email)
        new_mail.attach_files([img])
        # print(new_mail)
        new_mail.send(passw)
        return True
    except Exception as e:
        print(e)
        return False
    
def verify_email(sender_email,passw):
    try:
        new_mail = SendMail([sender_email], f'Email verification',
                            f"Your email has been verified", 
                            sender_email)
        new_mail.send(passw)
        return True
    except Exception as e:
        print(e)
        return False
    
def save_images(img,num,email,passw):
    img_path = os.path.join('data','user_data','found_images',f'{str(uuid.uuid4())}.jpeg')
    img_data = load_image(img,path_to_save=img_path,save=True)
    df = pd.read_csv(os.path.join('data','admin_data','missing_data.csv'))
    match_score = 0.5
    match_details = None
    match_idx = None
    flag = 0
    for idx,row in df.iterrows():
        # print(row)
        # if row['Match-found'].lower() == 'no':
        res = get_distance(row['img_path'],img_path)
        print(1-res['distance'])
        if res['verified'] and ((1-res['distance']) > match_score):
            print(row['img_path'])
            match_score = 1-res['distance']
            match_details = row
            match_idx = idx
            flag = 1
    if flag:
        df.at[match_idx, 'Match-found'] = 'Yes'
        df.at[match_idx, 'email_sent'] = 'Yes'
        df.to_csv(os.path.join('data','admin_data','missing_data.csv'),index=False)
        response = gps_tracker()
        status = send_email(num,email,passw,match_details['email'],match_details['admin-email'],match_details['name'],img_path,response)
        return status
    return True


page = st.sidebar.radio(label="Menu",options=['Report Sighting','Missing Reports from admin'])
if page == "Report Sighting":
    st.markdown("> Report Sighting of Person")
    st.write("***")
    number = st.text_input(label="Enter Phone Number",value=123456789)
    email = st.text_input(label="Email address")
    passw = st.text_input(label="Email password")
    person_image = st.file_uploader("Upload Sighting Image Here", type=["jpg","jpeg"])
    upload = st.button(label="Upload")
    if upload:
        status = verify_email(email,passw)
        if status:
            status = save_images(person_image,number,email,passw)
            if status:
                st.markdown("> Thank you for reporting. If match found will send email")
            else:
                st.markdown("> Match Found. Please enter correct email address or password")
        else:
            st.markdown("Email or Password Incorrect")
            
if page == 'Missing Reports from admin':
    st.markdown("> Missing Data Reports")
    csv_path = os.path.join('data','admin_data','missing_data.csv')
    df = pd.read_csv(csv_path)
    df = df.drop(columns=['img_path'])
    st.dataframe(df)